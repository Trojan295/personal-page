<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>mongodb on myhightech.org</title><link>https://myhightech.org/tags/mongodb/</link><description>Recent content in mongodb on myhightech.org</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 02 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://myhightech.org/tags/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>Transactional outbox pattern example in Golang and MongoDB</title><link>https://myhightech.org/posts/20230702-transactional-inbox-pattern/</link><pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate><guid>https://myhightech.org/posts/20230702-transactional-inbox-pattern/</guid><description>For a personal project, I was experimenting with DDD. I was sending domain events through RabbitMQ to run choreography-based sagas. One problem I had was ensuring that the domain event got sent out after modifying aggregates. It&amp;rsquo;s not possible to run an atomic transaction through MongoDB and RabbitMQ, so there can be a situation where the aggregate is modified successfully in the database, but we won&amp;rsquo;t send an event because RabbitMQ is not available.</description></item></channel></rss>